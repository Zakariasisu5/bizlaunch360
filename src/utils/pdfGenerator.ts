import jsPDF from 'jspdf';

export interface BusinessPlanData {
  title?: string;
  executiveSummary: string;
  businessDescription: string;
  marketAnalysis: string;
  organization: string;
  products: string;
  marketing: string;
  funding: string;
  financials: string;
}

export const generateBusinessPlanPDF = (planData: BusinessPlanData): Promise<void> => {
  return new Promise((resolve, reject) => {
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const maxWidth = pageWidth - 2 * margin;
      let currentY = margin;

      // Helper function to add text with automatic page breaks
      const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
        pdf.setFontSize(fontSize);
        if (isBold) {
          pdf.setFont(undefined, 'bold');
        } else {
          pdf.setFont(undefined, 'normal');
        }

        const lines = pdf.splitTextToSize(text, maxWidth);
        
        for (let i = 0; i < lines.length; i++) {
          if (currentY + fontSize > pageHeight - margin) {
            pdf.addPage();
            currentY = margin;
          }
          pdf.text(lines[i], margin, currentY);
          currentY += fontSize * 0.5;
        }
        currentY += 5; // Add some spacing after text
      };

      // Helper function to add section
      const addSection = (title: string, content: string) => {
        if (currentY + 30 > pageHeight - margin) {
          pdf.addPage();
          currentY = margin;
        }
        
        addText(title, 16, true);
        currentY += 5;
        addText(content || 'No content provided for this section.', 12, false);
        currentY += 10;
      };

      // Title page
      pdf.setFontSize(24);
      pdf.setFont(undefined, 'bold');
      const title = planData.title || 'Business Plan';
      const titleWidth = pdf.getTextWidth(title);
      pdf.text(title, (pageWidth - titleWidth) / 2, 60);

      currentY = 100;
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'normal');
      const subtitle = 'Generated by BizLaunch360';
      const subtitleWidth = pdf.getTextWidth(subtitle);
      pdf.text(subtitle, (pageWidth - subtitleWidth) / 2, currentY);

      currentY += 30;
      const date = new Date().toLocaleDateString();
      const dateText = `Created on: ${date}`;
      const dateWidth = pdf.getTextWidth(dateText);
      pdf.text(dateText, (pageWidth - dateWidth) / 2, currentY);

      // Add new page for content
      pdf.addPage();
      currentY = margin;

      // Table of Contents
      addText('Table of Contents', 18, true);
      currentY += 5;
      
      const tocItems = [
        '1. Executive Summary',
        '2. Business Description', 
        '3. Market Analysis',
        '4. Organization & Management',
        '5. Products & Services',
        '6. Marketing & Sales Strategy',
        '7. Funding Request',
        '8. Financial Projections'
      ];

      tocItems.forEach(item => {
        addText(item, 12, false);
      });

      currentY += 20;

      // Add sections
      addSection('1. Executive Summary', planData.executiveSummary);
      addSection('2. Business Description', planData.businessDescription);
      addSection('3. Market Analysis', planData.marketAnalysis);
      addSection('4. Organization & Management', planData.organization);
      addSection('5. Products & Services', planData.products);
      addSection('6. Marketing & Sales Strategy', planData.marketing);
      addSection('7. Funding Request', planData.funding);
      addSection('8. Financial Projections', planData.financials);

      // Footer with page numbers
      const pageCount = (pdf as any).internal.pages.length - 1; // Subtract 1 as pages array includes an empty first element
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(10);
        pdf.setFont(undefined, 'normal');
        const footerText = `Page ${i} of ${pageCount}`;
        const footerWidth = pdf.getTextWidth(footerText);
        pdf.text(footerText, (pageWidth - footerWidth) / 2, pageHeight - 10);
      }

      // Save the PDF
      const fileName = `${planData.title || 'business-plan'}-${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);
      
      resolve();
    } catch (error) {
      console.error('Error generating PDF:', error);
      reject(error);
    }
  });
};